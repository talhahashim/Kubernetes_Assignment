When troubleshooting an application that is not reachable through a NodePort service, you need to check several potential points of failure.
Here is a systematic approach and steps you should take to diagnose and resolve the issue:
Step-by-Step Troubleshooting Approach
  1. Verify Pod Status:
    Check the status of the pods created by the ReplicaSet to ensure they are running without errors.
    kubectl get pods
    kubectl describe pod <pod-name>
    kubectl logs <pod-name>
    Ensure that the application within the pod is running and listening on port 8000.
  2. Check ReplicaSet Status:
    Ensure the ReplicaSet has created the desired number of pods and they are in a running state.
    kubectl get replicasets
    kubectl describe replicaset <replicaset-name>
  3. Validate Service Configuration:
    Ensure the NodePort service is correctly configured to point to the pods created by the ReplicaSet.
    kubectl get svc
    kubectl describe svc <service-name>
    Verify the service definition, paying attention to the selector, ports, and nodePort fields.

    Example NodePort Service definition:
    apiVersion: v1
    kind: Service
    metadata:
      name: my-service
    spec:
      type: NodePort
      selector:
        app: my-app
      ports:
        - protocol: TCP
          port: 8000
          targetPort: 8000
          nodePort: 30080
  4. Check NodePort Accessibility:
    Ensure that the NodePort is correctly exposed and accessible from outside the cluster.
    kubectl get nodes -o wide
    Get the external IP of one of the nodes and verify the NodePort (e.g., 30080) is reachable:
    curl http://<node-ip>:30080
  5. Network Policies and Firewalls:
    Check if there are any network policies or firewall rules that might be blocking access to the NodePort.
    Network Policies:
      kubectl get networkpolicies
      kubectl describe networkpolicy <policy-name>
    Firewall Rules: 
      Ensure the firewall on your cloud provider or on-premise setup allows traffic to the NodePort range (default: 30000-32767).
  6. Check Service Endpoints:
    Verify that the service has correctly discovered the pod endpoints.
    kubectl get endpoints
    kubectl describe endpoints <service-name>
    Ensure that the endpoints correspond to the pods running the application.
  7. Port Binding in Application:
    Ensure the application inside the pod is binding to the correct port (8000) and is not restricted to localhost only.
    The application should bind to 0.0.0.0 to be accessible from outside the pod.
    kubectl exec -it <pod-name> -- netstat -tuln
    
  8. DNS Resolution:
    Ensure that DNS resolution is working correctly within the cluster and that the service name resolves to the correct IP addresses.

    kubectl exec -it <pod-name> -- nslookup <service-name>

  9. Review Deployment and ReplicaSet Configuration:
    Double-check the deployment and ReplicaSet YAML configurations for any discrepancies that might affect pod or service behavior.

  Example Steps in Practice
    Check Pods:
      kubectl get pods
      # Identify the pod name
      kubectl describe pod <pod-name>
      kubectl logs <pod-name>

    Check ReplicaSet:
      kubectl get replicasets
      kubectl describe replicaset <replicaset-name>
      
    Validate Service:
      kubectl get svc
      kubectl describe svc <service-name>

    NodePort Accessibility:
      kubectl get nodes -o wide
      curl http://<node-ip>:30080

    Network Policies and Firewalls:
      kubectl get networkpolicies
      kubectl describe networkpolicy <policy-name>
      # Check firewall rules on your cloud provider

    Check Endpoints:
      kubectl get endpoints
      kubectl describe endpoints <service-name>

    Port Binding:
      kubectl exec -it <pod-name> -- netstat -tuln

    DNS Resolution:
      kubectl exec -it <pod-name> -- nslookup <service-name>

    Review Configuration:
      Verify the YAML files for deployment and ReplicaSet.

By following these steps, you should be able to systematically identify and resolve the issue preventing your application from being reachable through the NodePort service.












